// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RPS.Services.Game.Data;

#nullable disable

namespace RPS.Services.Game.Data.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250211182723_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParticipantRoom", b =>
                {
                    b.Property<long>("RoomsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpectatorsId")
                        .HasColumnType("bigint");

                    b.HasKey("RoomsId", "SpectatorsId");

                    b.HasIndex("SpectatorsId");

                    b.ToTable("ParticipantRoom");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.Entities.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Player1Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Player2Id")
                        .HasColumnType("bigint");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("WinnerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.Entities.Participant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Groups")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.Entities.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxAllowedGameRating")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.Entities.Round", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("GameStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("Player1Choice")
                        .HasColumnType("integer");

                    b.Property<int?>("Player2Choice")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("WinnerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.EntitiesChanges.GameChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("GameStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GamesChanges");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.EntitiesChanges.RoomChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoomChangeType")
                        .HasColumnType("integer");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomsChanges");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.EntitiesChanges.RoundChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RoundId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoundStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundsChanges");
                });

            modelBuilder.Entity("ParticipantRoom", b =>
                {
                    b.HasOne("RPS.Services.Game.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPS.Services.Game.Domain.Entities.Participant", null)
                        .WithMany()
                        .HasForeignKey("SpectatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.Entities.Game", b =>
                {
                    b.HasOne("RPS.Services.Game.Domain.Entities.Participant", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPS.Services.Game.Domain.Entities.Participant", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id");

                    b.HasOne("RPS.Services.Game.Domain.Entities.Room", "Room")
                        .WithMany("Games")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player1");

                    b.Navigation("Player2");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.Entities.Round", b =>
                {
                    b.HasOne("RPS.Services.Game.Domain.Entities.Game", null)
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.EntitiesChanges.GameChange", b =>
                {
                    b.HasOne("RPS.Services.Game.Domain.Entities.Game", "Game")
                        .WithMany("GameChanges")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.EntitiesChanges.RoomChange", b =>
                {
                    b.HasOne("RPS.Services.Game.Domain.Entities.Room", "Room")
                        .WithMany("RoomChanges")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.EntitiesChanges.RoundChange", b =>
                {
                    b.HasOne("RPS.Services.Game.Domain.Entities.Round", "Round")
                        .WithMany("RoundChanges")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.Entities.Game", b =>
                {
                    b.Navigation("GameChanges");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.Entities.Room", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("RoomChanges");
                });

            modelBuilder.Entity("RPS.Services.Game.Domain.Entities.Round", b =>
                {
                    b.Navigation("RoundChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
